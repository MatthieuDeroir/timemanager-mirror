#!/bin/bash

# Define the URL and report file
URL="https://timemanager-frontend.onrender.com"
NMAP_URL="timemanager-frontend.onrender.com"
REPORT_FILE="pentest_report_$(date +%F).txt"
WORDLIST="./common.txt"
PASSWORD_FILE="rockyou.txt"  # Update to the file with password hashes you want to test


# Prepare the report file
echo "Pentest Report for $URL" > "$REPORT_FILE"
echo "Date: $(date)" >> "$REPORT_FILE"
echo "======================================" >> "$REPORT_FILE"

# 1. DIRB Scan
#echo "Running DIRB scan..."
#dirb "$URL" "$WORDLIST" -o dirb_result.txt & pid=$!
#wait $pid
#echo "### DIRB Scan Results ###" >> "$REPORT_FILE"
#cat dirb_result.txt >> "$REPORT_FILE"
#cat dirb_result.txt  # Display output to console
#echo "======================================" >> "$REPORT_FILE"

# 1. Gobuster Scan (+ More efficient than DIRB)
echo "Running Gobuster scan..."
gobuster dir -u https://example.com -w /path/to/wordlist.txt -o gobuster_result.txt
wait $pid
echo "### Gobuster Scan Results ###" >> "$REPORT_FILE"
cat gobuster_result.txt >> "$REPORT_FILE"
cat gobuster_result.txt  # Display output to console
echo "======================================" >> "$REPORT_FILE"

# 2. Nmap Scan
echo "Running Nmap scan..."
nmap -sS -O -sV "$NMAP_URL" -oN nmap_result.txt & pid=$!
wait $pid
echo "### Nmap Scan Results ###" >> "$REPORT_FILE"
cat nmap_result.txt >> "$REPORT_FILE"
cat nmap_result.txt  # Display output to console
echo "======================================" >> "$REPORT_FILE"

# 3. SQLMap Test
echo "Running SQLMap test..."
sqlmap -u "$URL?id=1" --batch --level=5 --risk=3 --random-agent --tamper=space2comment --output-dir=sqlmap_results & pid=$!
wait $pid
echo "### SQLMap Results ###" >> "$REPORT_FILE"
cat sqlmap_results/timemanager-frontend.onrender.com/log.txt >> "$REPORT_FILE"
cat sqlmap_results/timemanager-frontend.onrender.com/log.txt  # Display output to console
echo "======================================" >> "$REPORT_FILE"

# 4. John the Ripper Test
if [[ -f "$PASSWORD_FILE" ]]; then
    echo "Running John the Ripper test..."
    john --wordlist=./rockyou.txt "$PASSWORD_FILE" --format=raw-md5 & pid=$!
    wait $pid
    echo "### John the Ripper Results ###" >> "$REPORT_FILE"
    john --show "$PASSWORD_FILE" >> "$REPORT_FILE"
    john --show "$PASSWORD_FILE"  # Display output to console
    echo "======================================" >> "$REPORT_FILE"
else
    echo "No password file found. Skipping John the Ripper test."
fi

# 5. Nikto Scan
echo "Running Nikto scan..."
nikto -h "$URL" -C all -output nikto_result.txt & pid=$!
wait $pid
echo "### Nikto Scan Results ###" >> "$REPORT_FILE"
cat nikto_result.txt >> "$REPORT_FILE"
cat nikto_result.txt  # Display output to console
echo "======================================" >> "$REPORT_FILE"

# 6. Zap scan

# Define keywords for filtering interesting results
KEYWORDS=("admin" "login" "config" "backup" ".env" "database" "private" "secret" "dashboard" "api")

# Start ZAP Spider Scan
# Start ZAP Spider Scan
echo "Running ZAP Spider Scan..."
ZAP_APIKEY="hk9rr4vdpcf7rih0uv39qdkbfj"
SPIDER_SCAN_ID=$(curl -s "http://127.0.0.1:8090/JSON/spider/action/scan/?url=$URL&apikey=$ZAP_APIKEY" | jq -r '.scan')
echo "ZAP Spider Scan ID: $SPIDER_SCAN_ID"

# Monitor the scan until complete
echo "Monitoring ZAP Spider Scan Progress..."
while : ; do
    SCAN_STATUS=$(curl -s "http://127.0.0.1:8090/JSON/spider/view/status/?scanId=$SPIDER_SCAN_ID&apikey=$ZAP_APIKEY" | jq -r '.status')
    echo "Current Progress: $SCAN_STATUS%"
    [[ "$SCAN_STATUS" == "100" ]] && break
    sleep 5
done

# Fetch and save spider scan results
SPIDER_RESULTS=$(curl -s "http://127.0.0.1:8090/JSON/spider/view/results/?scanId=$SPIDER_SCAN_ID&apikey=$ZAP_APIKEY" | jq -r '.results[]')

echo "### ZAP Spider Scan Results ###" >> "$REPORT_FILE"
for FILE_URL in $SPIDER_RESULTS; do
    # Check if URL matches any of the defined keywords
    for keyword in "${KEYWORDS[@]}"; do
        if [[ "$FILE_URL" == *"$keyword"* ]]; then
            echo "Found potentially interesting URL: $FILE_URL" >> "$REPORT_FILE"
            # Download content and save in the report
            CONTENT=$(curl -s "$FILE_URL")
            echo -e "\n#### Content of $FILE_URL ####\n$CONTENT\n" >> "$REPORT_FILE"
            echo "======================================" >> "$REPORT_FILE"
            break  # Stop searching through keywords if a match is found
        fi
    done
done

echo "Filtered ZAP Spider Scan Results Saved."

# Display summary
echo "All tests completed! Review the full report at $REPORT_FILE"
