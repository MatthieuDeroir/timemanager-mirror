from sslyze import (
    ServerNetworkLocation,
    ServerScanRequest,
    Scanner,
    ScanCommandAttemptStatusEnum,
)
from sslyze.errors import ServerHostnameCouldNotBeResolved
from sslyze.plugins.certificate_info_plugin import CertificateInfoScanResult
from sslyze.plugins.openssl_ccs_injection_plugin import OpenSslCcsInjectionScanResult
from sslyze.plugins.heartbleed_plugin import HeartbleedScanResult
from datetime import datetime
from pathlib import Path
import json
import sys

def main() -> None:
    print("=> Starting the scans")
    date_scans_started = datetime.utcnow()

    # Create the scan requests for each server that we want to scan
    try:
        all_scan_requests = [
            ServerScanRequest(server_location=ServerNetworkLocation(hostname="cloudflare.com")),
            ServerScanRequest(server_location=ServerNetworkLocation(hostname="google.com")),
        ]
    except ServerHostnameCouldNotBeResolved:
        print("Error resolving the supplied hostnames")
        return

    # Queue and run all the scans
    scanner = Scanner()
    scanner.queue_scans(all_scan_requests)

    # Retrieve and process the results for each server
    all_server_scan_results = []
    for scan_result in scanner.get_results():
        all_server_scan_results.append(scan_result)
        process_scan_result(scan_result)

    # Save the results to a JSON file
    json_file_out = Path("api_sample_results.json")
    print(f"\n\n=> Saving scan results to {json_file_out}")
    save_results_to_json(json_file_out, all_server_scan_results, date_scans_started, datetime.utcnow())

    # Parse results from the JSON file to verify correctness
    print(f"\n\n=> Parsing scan results from {json_file_out}")
    parse_results_from_json(json_file_out)

def process_scan_result(scan_result) -> None:
    print(f"\n\n****Results for {scan_result.server_location.hostname}****")

    if scan_result.scan_status == "ERROR_NO_CONNECTIVITY":
        print(f"\nError: Could not connect to {scan_result.server_location.hostname}")
        return

    # Process certificate info
    cert_info = scan_result.scan_commands_results.certificate_info
    if cert_info and cert_info.status == ScanCommandAttemptStatusEnum.COMPLETED:
        print("\nLeaf certificates deployed:")
        for cert_chain in cert_info.result.certificate_deployments:
            leaf_cert = cert_chain.received_certificate_chain[0]
            print(f"Subject: {leaf_cert.subject}")

    # Process heartbleed scan
    heartbleed = scan_result.scan_commands_results.heartbleed
    if heartbleed and heartbleed.status == ScanCommandAttemptStatusEnum.COMPLETED:
        if heartbleed.result.is_vulnerable_to_heartbleed:
            print("Vulnerable to Heartbleed!")
        else:
            print("Not vulnerable to Heartbleed.")

    # Process OpenSSL CCS Injection scan
    ccs_injection = scan_result.scan_commands_results.openssl_ccs_injection
    if ccs_injection and ccs_injection.status == ScanCommandAttemptStatusEnum.COMPLETED:
        if ccs_injection.result.is_vulnerable_to_ccs_injection:
            print("Vulnerable to OpenSSL CCS Injection!")
        else:
            print("Not vulnerable to OpenSSL CCS Injection.")

def save_results_to_json(file_out: Path, results, start_time, end_time) -> None:
    data = {
        "scan_start_time": start_time.isoformat(),
        "scan_end_time": end_time.isoformat(),
        "results": [
            {
                "hostname": result.server_location.hostname,
                "scan_status": result.scan_status,
            }
            for result in results
        ]
    }
    with open(file_out, "w") as json_file:
        json.dump(data, json_file, indent=4)

def parse_results_from_json(file_in: Path) -> None:
    with open(file_in, "r") as json_file:
        data = json.load(json_file)
    print(f"Scan started: {data['scan_start_time']}")
    print(f"Scan ended: {data['scan_end_time']}")
    for result in data['results']:
        print(f"Result for {result['hostname']}: {result['scan_status']}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python sslyze_scan.py <hostname> [port]")
        sys.exit(1)

    main()
