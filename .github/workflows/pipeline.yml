name: CI/CD Pipeline

on:
  push:
    branches: ["mdr/backend"]
  pull_request:
    branches: ["mdr/backend"]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  packages: write

jobs:
  build-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.14"
          otp-version: "25.0"

      - name: Install Dependencies
        working-directory: ./backend
        run: mix deps.get

      - name: Run Tests
        working-directory: ./backend
        run: mix test

      - name: Build Docker Image for Backend
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: ghcr.io/matthieuderoir/timemanager-mirror/backend:latest

  build-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    outputs:
      frontend-image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm ci

      # - name: Run Tests
      #   working-directory: ./frontend
      #   run: npm test

      - name: Build Docker Image for Frontend
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: ghcr.io/matthieuderoir/timemanager-mirror/frontend:latest

  docker-build-and-push:
    name: Build and Push Docker Images
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ghcr.io/matthieuderoir/timemanager-mirror/backend:latest

      - name: Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/matthieuderoir/timemanager-mirror/frontend:latest

  deploy-to-render:
    name: Deploy to Render
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Backend Deploy on Render
        run: |
          curl -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}

      - name: Trigger Frontend Deploy on Render
        run: |
          curl -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}

  run-pentesting:
    name: Run Pentesting Script
    needs: deploy-to-render
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image for Pentest
        uses: docker/build-push-action@v4
        with:
          context: ./pentest
          push: false
          tags: ghcr.io/matthieuderoir/timemanager-mirror/pentest:latest

      - name: Run Pentest Docker Container
        run: |
          docker run --rm ghcr.io/matthieuderoir/timemanager-mirror/pentest:latest

      - name: Upload Pentest Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: pentest-report
          path: /var/www/html/reports/pentest_report_*.txt
